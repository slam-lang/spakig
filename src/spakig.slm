{
The slam package manager

Started by:
  Preston Precourt (prestosilver) 2022

TODO: develop command
}
inc stdlib.slm
inc stdlib/log.slm
inc stdlib/os.slm

proc version 0 1
  "0.1.0" ret
end

enum
0   HELP_VERSION
    HELP_ARGS
    HELP_OPER
    HELP_PACKAGE
end

const READSIZE 1024

var tempcommand 64
var tempclone 64
var temppath 256
var cachepath 256

var srcpath 256
var libpath 256
var binpath 256
var inputfd int.SIZE
var readbuffer int.SIZE
var cmdbuffer READSIZE
var _ 1

var stack int.SIZE
var stacktop int.SIZE

proc inner 1 1
  1 + copy
  copy (cstr.len) 1 - + 0 putc disc
  ret
end

proc pushstack 1 0
  (inner) copy (cstr.len) 1 + (heap.zalloc) swap (cstr.copy) (cstr.len) covr + 1 + 0 putc disc
  stack read
  stacktop read +
  copy read 0 != if [
    copy read (heap.free)
  ]
  swap
  put disc

  stacktop
  copy read int.SIZE +
  put disc

  ret
end

proc popstack 0 1
  stacktop
  copy read int.SIZE -
  put disc

  stack read
  stacktop read +
  read

  ret
end

proc help 1 0
  copy HELP_VERSION == if [
    "slam compiler v" (cstr.print) (version) (cstr.println)
    disc 0 quit
  ] copy HELP_ARGS == if [
    "ERROR: You must specify an operation" (cstr.println)
  ] copy HELP_OPER == if [
    "ERROR: Invalid operation `" (cstr.print)
    1 (os.args) (cstr.print)
    "`" (cstr.println)
  ] copy HELP_PACKAGE == if [
    "ERROR: You must specify a package name" (cstr.println)
  ] disc
  "spakig the Slam package manager v" (cstr.print) (version) (cstr.print) " usage:" (cstr.println)
  (cstr.cr)
  "    spakig install [packagename]" (cstr.println)
  "    spakig remove  [packagename]" (cstr.println)
  "    spakig init" (cstr.println)
  (cstr.cr)
  
  1 quit

  ret
end

proc openinput 1 0
  0 swap
  fm.READ swap
  0
  covr readc '/' != if [
    disc -100
  ]
  (os.open)
  inputfd swap put disc

  ret
end

proc clonerepo 0 0
  tempclone (cstr.clear) "http://github.com/" (cstr.copy) disc
  2 (os.args) (cstr.cat)
  disc

  temppath (cstr.clear) cachepath (cstr.copy) disc
  2 (os.args) (cstr.cat)
  disc

  tempcommand
  "/usr/bin/git" put int.SIZE +
  "clone" put int.SIZE +
  tempclone put int.SIZE +
  temppath put int.SIZE +
  NULL put disc

  tempcommand (os.execcmdecho)

  ret
end

proc pullrepo 0 0
  tempcommand (os.execcmdecho)

  temppath (cstr.clear) cachepath (cstr.copy) disc
  2 (os.args) (cstr.cat)
  disc

  tempcommand
  "/usr/bin/git" put int.SIZE +
  "-C" put int.SIZE +
  temppath put int.SIZE +
  "pull" put int.SIZE +
  "-f" put int.SIZE +
  "-q" put int.SIZE +
  NULL put disc

  tempcommand (os.execcmdecho)

  ret
end

proc setsrc 0 0
  srcpath (cstr.clear) cachepath (cstr.copy) disc
  "/" (cstr.cat)
  (popstack) (cstr.cat)
  "/" (cstr.cat)
  disc

  ret
end

proc addreq 0 0
  temppath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/bin/spakig" (cstr.cat) disc

  tempcommand
  temppath put int.SIZE +
  "install" put int.SIZE +
  (popstack) put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)

  ret
end

proc addbin 0 0
  (popstack)

  temppath (cstr.clear) srcpath (cstr.copy) disc
  covr (cstr.cat)
  ".slm" (cstr.cat)
  disc

  libpath (cstr.clear) binpath (cstr.copy) disc
  swap (cstr.cat)
  disc
  
  tempcommand
  "/usr/bin/slam" put int.SIZE +
  "-o" put int.SIZE +
  libpath put int.SIZE +
  temppath put int.SIZE +
  NULL put disc


  tempcommand (os.execcmdecho)
  
  ret
end

proc addlibd 0 0
  libpath (cstr.clear) srcpath (cstr.copy) disc
  (popstack) (cstr.cat)
  disc

  temppath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/lib/" (cstr.cat)
  disc

  tempcommand
  "/usr/bin/cp" put int.SIZE +
  "-r" put int.SIZE +
  libpath put int.SIZE +
  temppath put int.SIZE +
  NULL put disc

  tempcommand (os.execcmdecho)

  ret
end

proc addlib 0 0
  libpath (cstr.clear) srcpath (cstr.copy) disc
  (popstack) (cstr.cat)
  disc

  temppath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/lib/" (cstr.cat)
  disc

  tempcommand
  "/usr/bin/cp" put int.SIZE +
  libpath put int.SIZE +
  temppath put int.SIZE +
  NULL put int.SIZE +
  disc

  tempcommand (os.execcmdecho)

  ret
end

proc parsecmd 0 0
  cmdbuffer readc '"' == cmdbuffer (cstr.last) '"' == && if [
    cmdbuffer (pushstack)

    cmdbuffer (cstr.clear) disc

    ret
  ]
  cmdbuffer
  copy "src"  (cstr.eq) if [ (setsrc)  disc ret]
  copy "req"  (cstr.eq) if [ (addreq)  disc ret]
  copy "bin"  (cstr.eq) if [ (addbin)  disc ret]
  copy "lib"  (cstr.eq) if [ (addlib)  disc ret]
  copy "libd" (cstr.eq) if [ (addlibd) disc ret] 
  disc

  2 0 (log.level)
  "ERR" "invalid command: `" (log.msg)
  cmdbuffer (log.cat)
  "`" (log.cat)
  
  255 quit
end

proc checkcmd 0 1
  cmdbuffer readc '"' == cmdbuffer (cstr.last) '"' != &&
  cmdbuffer """ (cstr.eq) ||
  !

  ret
end

proc checkbuffer 2 2
  { if the command is complete, get the buffer }
  (checkcmd) if [(parsecmd) disc disc cmdbuffer 0 ret]

  { if the command is not complete, append a space }
  disc 32
  ret
end


proc parsefile 0 0
  stack 1024 (heap.zalloc) put disc

  inputfd read 0 == if ret
  READSIZE READSIZE (heap.zalloc)
  readbuffer swap put read
  inputfd read (os.read) disc
  inputfd read 74 sys1 disc
  do
    readbuffer read
    copy
    cmdbuffer
    do
      covr readc
      
      copy 9 {tab} ==
      covr 10 {lf} == ||
      covr 13 {cr} == ||
      covr 32 {spc} == ||
      if (checkbuffer)

      
      covr
      swap
      putc disc

      swap
      1 +
      swap
      copy readc 0 != if [
        1 +
      ]

      covr readc 0 !=
    end
    disc
    disc
    
    readbuffer swap put disc

    readbuffer read (cstr.clear)

    cmdbuffer (cstr.copy) disc disc

    READSIZE cmdbuffer (cstr.len) -
    readbuffer read cmdbuffer (cstr.len) +
    inputfd read (os.read) copy
    readbuffer read + cmdbuffer (cstr.len) + 1 + copy readc 0 != if (cstr.clear) disc

    cmdbuffer READSIZE (mem.zero)
  end
  
  readbuffer read
  (heap.free)
  
  ret
end

proc init 0 0
  cachepath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/cache/" (cstr.cat) disc
 
  libpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/lib/" (cstr.cat) disc

  binpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/bin/" (cstr.cat) disc

  tempcommand
  "/usr/bin/mkdir" put int.SIZE +
  "-p" put int.SIZE +
  cachepath put int.SIZE +
  binpath put int.SIZE +
  libpath put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecho)

  cachepath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/cache/" (cstr.cat) disc
  
  temppath (cstr.clear) cachepath (cstr.copy) disc
  "slam" (cstr.cat)
  disc

  tempcommand
  "/usr/bin/git" put int.SIZE +
  "clone" put int.SIZE +
  "http://github.com/slam-lang/slam" put int.SIZE +
  temppath put int.SIZE +
  NULL put disc

  tempcommand (os.execcmdecho)

  tempcommand
  0 (os.args) put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/stdlib" put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)

  tempcommand
  0 (os.args) put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/math" put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)

  temppath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/cache/slam/old/slam.py" (cstr.cat) disc
  
  binpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/bin/slam" (cstr.cat) disc

  srcpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/cache/slam/slam.slm" (cstr.cat) disc
  
  tempcommand
  temppath put int.SIZE +
  "-i" put int.SIZE +
  libpath put int.SIZE +
  "-o" put int.SIZE +
  binpath put int.SIZE +
  srcpath put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)

  srcpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/cache/slam" (cstr.cat) disc

  tempcommand
  "/usr/bin/rm" put int.SIZE +
  "-rf" put int.SIZE +
  srcpath put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)
  
  tempcommand
  0 (os.args) put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/spakig" put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)
  
  tempcommand
  0 (os.args) put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/slam" put int.SIZE +
  NULL put disc
  
  tempcommand (os.execcmdecholoud)

  0 quit
end

proc install 0 0
  2 argc == if [HELP_PACKAGE (help)]
  
  cachepath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/cache/" (cstr.cat) disc
 
  libpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/lib/" (cstr.cat) disc

  binpath (cstr.clear) "HOME" (os.env) (cstr.copy) disc
  "/.local/slam/bin/" (cstr.cat) disc

  tempcommand
  "/usr/bin/mkdir" put int.SIZE +
  "-p" put int.SIZE +
  cachepath put int.SIZE +
  binpath put int.SIZE +
  libpath put int.SIZE +
  NULL put disc

  temppath (cstr.clear) cachepath (cstr.copy) disc
  2 (os.args) (cstr.cat)
  (os.fexists) copy
  if [
    (pullrepo)
  ]
  ! if [
    (clonerepo)
  ]

  temppath (cstr.clear) cachepath (cstr.copy) disc
  2 (os.args) (cstr.cat)
  "/package.spk" (cstr.cat)

  (os.fexists) ! if [
    "ERROR: No package file in repo" (cstr.println)
    temppath (cstr.println)

    255 quit
  ]

  temppath (openinput)

  3 0 (log.level)
  "SPK" "Installing " (log.msg)
  temppath (log.cat)
  (log.log)

  temppath (cstr.clear) cachepath (cstr.copy)
  2 (os.args) (cstr.cat)
  disc

  (parsefile)

  0 quit
end

proc remove 0 0
  2 argc == if [HELP_PACKAGE (help)]

  0 quit
end

proc main 0 0
  1 argc == if [HELP_ARGS (help)]

  1 (os.args)
  copy "init" (cstr.eq) if (init)
  copy "install" (cstr.eq) if (install)
  copy "remove" (cstr.eq) if (remove)
  disc

  HELP_OPER (help)

  ret
end
