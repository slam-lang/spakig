{
The slam package manager

Started by:
  Preston Precourt (prestosilver) 2022

TODO: develop command
}
inc "std/cstr.slm"
inc "std/int.slm"
inc "std/heap.slm"
inc "std/mem.slm"
inc "std/os.slm"

oper proc VERSION 0 1
  "0.1.0" ret
end

enum
0   HELP_VERSION
    HELP_ARGS
    HELP_OPER
    HELP_PACKAGE
end

const READSIZE 1024

var tempcommand 64
var tempclone 64
var temppath 256
var cachepath 256

var srcpath 256
var libpath 256
var binpath 256
var inputfd int.SIZE
var readbuffer int.SIZE
var cmdbuffer READSIZE
var _ 1

var stack int.SIZE
var stacktop int.SIZE

oper proc inner 1 1
  1 + copy
  copy cstr.len 1 - + 0 putc disc
  ret
end

oper proc pushstack 1 0
  inner copy cstr.len 1 + heap.zalloc swap cstr.cpy cstr.len covr + 1 + 0 putc disc
  stack read
  stacktop read +
  copy read 0 != if
    copy read heap.free
  end
  swap
  put disc

  stacktop
  copy read int.SIZE +
  put disc

  ret
end

oper proc popstack 0 1
  stacktop
  copy read int.SIZE -
  put disc

  stack read
  stacktop read +
  read

  ret
end

oper proc help 1 0
  copy HELP_VERSION == if
    "slam compiler v" cstr.print VERSION cstr.println
    disc 0 quit
  end
  copy HELP_ARGS == if
    "ERROR: You must specify an operation" cstr.println
  end
  copy HELP_OPER == if
    "ERROR: Invalid operation `" cstr.print
    1 os.args cstr.print
    "`" cstr.println
  end
  copy HELP_PACKAGE == if
    "ERROR: You must specify a package name" cstr.println
  end
  disc
  "spakig the Slam package manager v" cstr.print VERSION cstr.print " usage:" cstr.println
  cstr.cr
  "    spakig install [packagename]" cstr.println
  "    spakig remove  [packagename]" cstr.println
  "    spakig develop" cstr.println
  "    spakig init" cstr.println
  cstr.cr
  
  1 quit

  ret
end

oper proc openinput 1 0
  0 swap
  fm.READ swap
  0
  covr readc '/' != if
    disc -100
  end
  os.openf
  inputfd swap put disc

  ret
end

oper proc clonerepo 0 0
  tempclone cstr.clear "http://github.com/" cstr.cpy disc
  2 os.args cstr.cat
  disc

  temppath cstr.clear cachepath cstr.cpy disc
  2 os.args cstr.cat
  disc

  tempcommand
  "/usr/bin/git" put int.SIZE +
  "clone" put int.SIZE +
  tempclone put int.SIZE +
  temppath put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecho disc

  ret
end

oper proc pullrepo 0 0
  tempcommand os.execcmdecho disc

  temppath cstr.clear cachepath cstr.cpy disc
  2 os.args cstr.cat
  disc

  tempcommand
  "/usr/bin/git" put int.SIZE +
  "-C" put int.SIZE +
  temppath put int.SIZE +
  "pull" put int.SIZE +
  "-f" put int.SIZE +
  "-q" put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecho disc

  ret
end

oper proc setsrc 0 0
  srcpath cstr.clear cachepath cstr.cpy disc
  "/" cstr.cat
  popstack cstr.cat
  "/" cstr.cat
  disc

  ret
end

oper proc addreq 0 0
  temppath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/bin/spakig" cstr.cat disc

  tempcommand
  temppath put int.SIZE +
  "install" put int.SIZE +
  popstack put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  ret
end

oper proc addbin 0 0
  popstack

  tempcommand
  "/usr/bin/rm" put int.SIZE +
  "-rf" put int.SIZE +
  "temp.asm" put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecholoud disc

  temppath cstr.clear srcpath cstr.cpy disc
  covr cstr.cat
  ".slm" cstr.cat
  disc

  libpath cstr.clear binpath cstr.cpy disc
  swap cstr.cat
  disc
  
  tempcommand
  "/usr/bin/slam" put int.SIZE +
  "-o" put int.SIZE +
  libpath put int.SIZE +
  temppath put int.SIZE +
  NULL put disc


  tempcommand os.execcmdecho disc
  
  ret
end

oper proc addlibd 0 0
  libpath cstr.clear srcpath cstr.cpy disc
  popstack cstr.cat
  disc

  temppath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/lib/" cstr.cat
  disc

  tempcommand
  "/usr/bin/cp" put int.SIZE +
  "-r" put int.SIZE +
  libpath put int.SIZE +
  temppath put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecho disc

  ret
end

oper proc addlib 0 0
  libpath cstr.clear srcpath cstr.cpy disc
  popstack cstr.cat
  disc

  temppath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/lib/" cstr.cat
  disc

  tempcommand
  "/usr/bin/cp" put int.SIZE +
  libpath put int.SIZE +
  temppath put int.SIZE +
  NULL put int.SIZE +
  disc

  tempcommand os.execcmdecho disc

  ret
end

oper proc parsecmd 0 0
  cmdbuffer readc '"' == cmdbuffer cstr.last '"' == && if
    cmdbuffer pushstack

    cmdbuffer cstr.clear disc

    ret
  end
  cmdbuffer
  copy "src"  cstr.eq if setsrc  disc ret end
  copy "req"  cstr.eq if addreq  disc ret end
  copy "bin"  cstr.eq if addbin  disc ret end
  copy "lib"  cstr.eq if addlib  disc ret end
  copy "libd" cstr.eq if addlibd disc ret end
  copy readc 0 == if disc ret end
  disc

  "[ERR] invalid command: `" cstr.print
  cmdbuffer cstr.print
  "`" cstr.println

  255 quit
end

oper proc checkcmd 0 1
  cmdbuffer readc '\"' == cmdbuffer cstr.last '\"' != &&
  cmdbuffer "\"" cstr.eq ||
  !

  ret
end

oper proc checkbuffer 2 2
  { if the command is complete, get the buffer }
  checkcmd if
    parsecmd disc disc cmdbuffer 0 ret
  end

  { if the command is not complete, append a space }
  disc 32
  ret
end


oper proc parsefile 0 0
  stack 1024 heap.zalloc put disc

  inputfd read 0 == if ret end
  READSIZE READSIZE heap.zalloc
  readbuffer swap put read
  inputfd read os.readf disc
  inputfd read 74 sys1 disc
  do
    readbuffer read
    copy
    cmdbuffer
    do
      covr readc
      
      copy 9 {tab} ==
      covr 10 {lf} == ||
      covr 13 {cr} == ||
      covr 32 {spc} == ||
      if
        checkbuffer
      end
      
      covr
      swap
      putc disc

      swap
      1 +
      swap
      copy readc 0 != if
        1 +
      end

      covr readc 0 !=
    end
    disc
    disc
    
    readbuffer swap put disc

    readbuffer read cstr.clear

    cmdbuffer cstr.cpy disc disc

    READSIZE cmdbuffer cstr.len -
    readbuffer read cmdbuffer cstr.len +
    inputfd read os.readf copy
    readbuffer read + cmdbuffer cstr.len + 1 + copy readc
    0 != if cstr.clear end
    disc

    cmdbuffer READSIZE mem.zero
  end
  
  readbuffer read
  heap.free
  
  ret
end

oper proc init 0 0
  cachepath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/" cstr.cat disc
 
  libpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/lib/" cstr.cat disc

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/bin/" cstr.cat disc

  tempcommand
  "/usr/bin/mkdir" put int.SIZE +
  "-p" put int.SIZE +
  cachepath put int.SIZE +
  binpath put int.SIZE +
  libpath put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecho disc

  cachepath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/" cstr.cat disc
  
  temppath cstr.clear cachepath cstr.cpy disc
  "slam" cstr.cat
  disc

  tempcommand
  "/usr/bin/git" put int.SIZE +
  "clone" put int.SIZE +
  "http://github.com/slam-lang/slam" put int.SIZE +
  temppath put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecho disc

  tempcommand
  0 os.args put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/slam-stdlib" put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  tempcommand
  0 os.args put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/math" put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/slam.o" cstr.cat disc

  srcpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/slam/slam.asm" cstr.cat disc
  
  tempcommand
  "/usr/bin/fasm" put int.SIZE +
  srcpath put int.SIZE +
  binpath put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/bin/slam" cstr.cat disc

  srcpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/slam.o" cstr.cat disc

  tempcommand
  "/usr/bin/ld" put int.SIZE +
  "-dynamic-linker" put int.SIZE +
  "/lib64/ld-linux-x86-64.so.2" put int.SIZE +
  "-o" put int.SIZE +
  binpath put int.SIZE +
  "-lc" put int.SIZE +
  "-melf_x86_64" put int.SIZE +
  srcpath put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  srcpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/slam.o" cstr.cat disc

  tempcommand
  "/usr/bin/rm" put int.SIZE +
  "-rf" put int.SIZE +
  srcpath put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc
  
  tempcommand
  0 os.args put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/spakig" put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  tempcommand
  0 os.args put int.SIZE +
  "install" put int.SIZE +
  "slam-lang/slam" put int.SIZE +
  NULL put disc
  
  tempcommand os.execcmdecholoud disc

  0 quit
end

oper proc install 0 0
  2 argc == if HELP_PACKAGE help end
  
  cachepath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/" cstr.cat disc
 
  libpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/lib/" cstr.cat disc

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/bin/" cstr.cat disc

  tempcommand
  "/usr/bin/mkdir" put int.SIZE +
  "-p" put int.SIZE +
  cachepath put int.SIZE +
  binpath put int.SIZE +
  libpath put int.SIZE +
  NULL put disc

  temppath cstr.clear cachepath cstr.cpy disc
  2 os.args cstr.cat
  os.existsf
  copy if
    pullrepo
  end
  ! if
    clonerepo
  end

  temppath cstr.clear cachepath cstr.cpy disc
  2 os.args cstr.cat
  "/package.spk" cstr.cat

  os.existsf ! if
    "ERROR: No package file in repo" cstr.println
    temppath cstr.println

    255 quit
  end

  temppath openinput

  "[SPK] Installing " cstr.print
  temppath cstr.println

  temppath cstr.clear cachepath cstr.cpy
  2 os.args cstr.cat
  disc

  parsefile

  0 quit
end

oper proc remove 0 0
  2 argc == if HELP_PACKAGE help end

  0 quit
end

oper proc develop 0 0
  2 argc != if HELP_ARGS help end

  var name 8

  os.cwd
  do
    1 +
    copy readc '/' == if
      name covr 1 + put disc
    end

    copy readc 0 !=
  end

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/local/" cstr.cat disc

  tempcommand
  "/usr/bin/mkdir" put int.SIZE +
  "-p" put int.SIZE +
  binpath put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecholoud disc

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/local/" cstr.cat
  name read cstr.cat disc

  cachepath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/local/" cstr.cat disc

  {ln -s ~/.local/slam/cache/local/[name] $CWD}
  tempcommand
  "/usr/bin/ln" put int.SIZE +
  "-sf" put int.SIZE +
  os.cwd put int.SIZE +
  cachepath put int.SIZE +
  NULL put disc

  tempcommand os.execcmdecholoud disc

  temppath cstr.clear binpath cstr.cpy disc
  "/package.spk" cstr.cat
  os.existsf ! if
    "ERROR: No package file in repo" cstr.println
    temppath cstr.println

    255 quit
  end

  temppath openinput

  "[SPK] Installing " cstr.print
  temppath cstr.println

  temppath cstr.clear cachepath cstr.cpy
  disc

  binpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/bin/" cstr.cat disc

  cachepath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/local/" cstr.cat
  name read cstr.cat disc

  srcpath cstr.clear "HOME" os.env cstr.cpy disc
  "/.local/slam/cache/local/" cstr.cat
  name read cstr.cat disc

  parsefile

  0 quit
end

oper proc main 0 0
  1 argc == if HELP_ARGS help end

  1 os.args
  copy "init" cstr.eq if init end
  copy "install" cstr.eq if install end
  copy "remove" cstr.eq if remove end
  copy "develop" cstr.eq if develop end
  disc

  HELP_OPER help

  ret
end
